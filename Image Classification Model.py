# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17D_uJ6oMv4tGubQzkRq6pjAQMlQxoutr
"""

from google.colab import files
files.upload()

! mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d chandanakuntala/cropped-lisa-traffic-light-dataset

!unzip /content/cropped-lisa-traffic-light-dataset.zip

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Input
from tensorflow.keras.layers import Input, Flatten, Dense, Dropout, Conv2D, MaxPooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Sequential
import numpy as np
import matplotlib.pyplot as plt
import pathlib

"""# DIRECTORY  SETT"""

import os
import shutil
import random

# Direktori sumber
source_dir = "/content/cropped_lisa_1/train_1/go"

# Direktori tujuan
destination_dir = "/content/cropped_lisa_1/val_1/go"

# Mendapatkan daftar file di direktori sumber
files = os.listdir(source_dir)

# Mengacak urutan file
random.shuffle(files)

# Mengambil 50 file pertama
files_to_move = files[:394]

# Memindahkan file ke direktori tujuan
for file_name in files_to_move:
    source_file = os.path.join(source_dir, file_name)
    destination_file = os.path.join(destination_dir, file_name)
    shutil.move(source_file, destination_file)
    print(f"File {file_name} dipindahkan.")

print("Pemindahan selesai.")

import os
import shutil
import random

# Direktori sumber
source_dir = "/content/cropped_lisa_1/train_1/goForward"

# Direktori tujuan
destination_dir = "/content/cropped_lisa_1/val_1/goForward"

# Mendapatkan daftar file di direktori sumber
files = os.listdir(source_dir)

# Mengacak urutan file
random.shuffle(files)

# Mengambil 50 file pertama
files_to_move = files[:508]

# Memindahkan file ke direktori tujuan
for file_name in files_to_move:
    source_file = os.path.join(source_dir, file_name)
    destination_file = os.path.join(destination_dir, file_name)
    shutil.move(source_file, destination_file)
    print(f"File {file_name} dipindahkan.")

print("Pemindahan selesai.")

import os
import shutil
import random

# Direktori sumber
source_dir = "/content/cropped_lisa_1/train_1/goLeft"

# Direktori tujuan
destination_dir = "/content/cropped_lisa_1/val_1/goLeft"

# Mendapatkan daftar file di direktori sumber
files = os.listdir(source_dir)

# Mengacak urutan file
random.shuffle(files)

# Mengambil 50 file pertama
files_to_move = files[:510]

# Memindahkan file ke direktori tujuan
for file_name in files_to_move:
    source_file = os.path.join(source_dir, file_name)
    destination_file = os.path.join(destination_dir, file_name)
    shutil.move(source_file, destination_file)
    print(f"File {file_name} dipindahkan.")

print("Pemindahan selesai.")

import os
import shutil
import random

# Direktori sumber
source_dir = "/content/cropped_lisa_1/train_1/stop"

# Direktori tujuan
destination_dir = "/content/cropped_lisa_1/val_1/stop"

# Mendapatkan daftar file di direktori sumber
files = os.listdir(source_dir)

# Mengacak urutan file
random.shuffle(files)

# Mengambil 50 file pertama
files_to_move = files[:510]

# Memindahkan file ke direktori tujuan
for file_name in files_to_move:
    source_file = os.path.join(source_dir, file_name)
    destination_file = os.path.join(destination_dir, file_name)
    shutil.move(source_file, destination_file)
    print(f"File {file_name} dipindahkan.")

print("Pemindahan selesai.")

import os
import shutil
import random

# Direktori sumber
source_dir = "/content/cropped_lisa_1/train_1/stopLeft"

# Direktori tujuan
destination_dir = "/content/cropped_lisa_1/val_1/stopLeft"

# Mendapatkan daftar file di direktori sumber
files = os.listdir(source_dir)

# Mengacak urutan file
random.shuffle(files)

# Mengambil 50 file pertama
files_to_move = files[:511]

# Memindahkan file ke direktori tujuan
for file_name in files_to_move:
    source_file = os.path.join(source_dir, file_name)
    destination_file = os.path.join(destination_dir, file_name)
    shutil.move(source_file, destination_file)
    print(f"File {file_name} dipindahkan.")

print("Pemindahan selesai.")

import os
import shutil
import random

# Direktori sumber
source_dir = "/content/cropped_lisa_1/train_1/warning"

# Direktori tujuan
destination_dir = "/content/cropped_lisa_1/val_1/warning"

# Mendapatkan daftar file di direktori sumber
files = os.listdir(source_dir)

# Mengacak urutan file
random.shuffle(files)

# Mengambil 50 file pertama
files_to_move = files[:508]

# Memindahkan file ke direktori tujuan
for file_name in files_to_move:
    source_file = os.path.join(source_dir, file_name)
    destination_file = os.path.join(destination_dir, file_name)
    shutil.move(source_file, destination_file)
    print(f"File {file_name} dipindahkan.")

print("Pemindahan selesai.")

import os
import shutil
import random

# Direktori sumber
source_dir = "/content/cropped_lisa_1/train_1/warningLeft"

# Direktori tujuan
destination_dir = "/content/cropped_lisa_1/val_1/warningLeft"

# Mendapatkan daftar file di direktori sumber
files = os.listdir(source_dir)

# Mengacak urutan file
random.shuffle(files)

# Mengambil 50 file pertama
files_to_move = files[:508]

# Memindahkan file ke direktori tujuan
for file_name in files_to_move:
    source_file = os.path.join(source_dir, file_name)
    destination_file = os.path.join(destination_dir, file_name)
    shutil.move(source_file, destination_file)
    print(f"File {file_name} dipindahkan.")

print("Pemindahan selesai.")

"""# New Section"""

TRAINING_DIR = "/content/cropped_lisa_1/train_1"
VALIDATION_DIR = "/content/cropped_lisa_1/val_1"

train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    vertical_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(TRAINING_DIR,
                                                    class_mode='categorical',
                                                    target_size=(150, 150))

validation_datagen = ImageDataGenerator(
    rescale=1.0/255
)
validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,
                                                        class_mode='categorical',
                                                        target_size=(150, 150))

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dropout(0.5),
    Dense(128, activation='relu'),
    Dense(7, activation='softmax')
])

int_lr = 1e-4
num_epochs = 30

optimizer = Adam(lr=int_lr)
model.compile(optimizer=optimizer,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

callbacks = [
    tf.keras.callbacks.EarlyStopping(patience=5, monitor='val_loss'),
    tf.keras.callbacks.ModelCheckpoint(
        filepath='/path/to/save/model.h5',
        save_best_only=True,
        monitor='val_loss',
        verbose=1
    )
]

# Pelatihan model dengan callback
H = model.fit(
    train_generator,
    epochs=num_epochs,
    validation_data=validation_generator,
    callbacks=callbacks
)

# Plot akurasi
plt.plot(H.history['accuracy'])
plt.plot(H.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Plot loss
plt.plot(H.history['loss'])
plt.plot(H.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Menyimpan model dalam format SavedModel
export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

# Convert SavedModel menjadi vegs.tflite
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('vegs.tflite')
tflite_model_file.write_bytes(tflite_model)